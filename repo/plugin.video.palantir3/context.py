# -*- coding: utf-8 -*-
#############################################################
#  context
#############################################################
import base64, codecs
elfary='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'
valderrama='Bpc29kZXMnIDoKICAgaWYgMzggLSAzODogaTEgLSBvT28wTzAwCiAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwMTUwICkgLCAnc2V0X3ZpZXcnICkgKQogICBpZiA4NSAtIDg1OiBJSWlJSWlJaTExSTEgKyBpSWlpaTFpICUgT29vME9vbyArIG9vbzBPMG9PMDAgKiBpMWlpSUlJMTExCiAgIGlmIDQ2IC0gNDY6IG9vT09PIC0gb29PT08gKyBPbyAvIEkxSSAqIE9vICsgb29vME8wb08wMAogICBJMTFpSWkxaSAuIGFwcGVuZCAoCiAoCiAnRW1idWFyeSBJbmZvJyAsCiAnUnVuU2NyaXB0KHNjcmlwdC5lbWJ1YXJ5LmluZm8sY2FsbD10dix0bWRiX2lkPSVzLHNlYXNvbj0lcywgZXBpc29kZT0lcyknICUgKAogc2VsZiAuIGl0ZW0gWyAndG1kYicgXSAsIHNlbGYgLiBpdGVtIFsgJ3NlYXNvbicgXSAsIHNlbGYgLiBpdGVtIFsgJ2VwaXNvZGUnIF0KICkKICkKICkKICAgaWYgOTggLSA5ODogSTFJIC8gSUlpSUlpSWkxMUkxIC8gbzAwbzBPTzAwTyArIE9PTzAwMDAwTyAlIE9vICsgSTFJCiAgZWxzZSA6CiAgIGlmIDM4IC0gMzg6IEkxSWkxSTEgKyBvT28wTzAwCiAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwMTUxICkgLCAnc2V0X3ZpZXcnICkgKQogICBpZiAyIC0gMjogT29vT29vICUgSWkgKyBvb28wTzBvTzAwIC4gT29vT29vICsgSUlpSUlpSWkxMUkxICogT28KICByZXR1cm4gSTExaUlpMWkKICBpZiAyIC0gMjogSUlpSUlpSWkxMUkxICsgaUkxaUlJMUkxSTFpIC0gSTFJaTFJMSArIG9vT09PIC4gSUlpSUlpSWkxMUkxCiAgaWYgMTUgLSAxNTogb29vMDAwCiBkZWYgc2hvdyAoIHNlbGYgLCBtZW51ID0gTm9uZSApIDoKICBpZiBtZW51IDoKICAgc2VsZiAuIGxhYmVsQWN0aW9ubGlzdCA9IG1lbnUKICBlbHNlIDoKICAgc2VsZiAuIGxhYmVsQWN0aW9ubGlzdCA9IHNlbGYgLiBfZ2VuZXJhdGVfbWVudSAoICkKICAgaWYgNjMgLSA2MzogbzAwbzBPTzAwTwogIGlmIGxlbiAoIHNlbGYgLiBsYWJlbEFjdGlvbmxpc3QgKSA+IDAgOgogICBzZWxmIC4gbGFiZWxBY3Rpb25saXN0IC4gc29ydCAoIGtleSA9IGxhbWJkYSBpMUlpIDogaTFJaSBbIDAgXSApCiAgIHNlbGYgLiBsYWJlbEFjdGlvbmxpc3QgLiBpbnNlcnQgKCAwICwgKCAnW0NPTE9SIGdvbGRdUGFsYW50aXIgM1svQ09MT1JdJyAsIE5vbmUgKSApCiAgIGlJMTExaTFJSUkgPSBsaXN0ICggbWFwICggbGFtYmRhIGkxSWkgOiBpMUlpIFsgMCBdICwgc2VsZiAuIGxhYmVsQWN0aW9ubGlzdCApICkKICAgTzAwbzAwID0gMAogICB3aGlsZSBPMDBvMDAgPT0gMCA6CiAgICBPMDBvMDAgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIGNvbnRleHRtZW51ICggaUkxMTFpMUlJSSApCiAgICBpZiAxMyAtIDEzOiBJMUkgKiBvb09PTwogICBpZiBPMDBvMDAgPiAwIDoKICAgIHNlbGYgLiBfZXhlYyAoIHNlbGYgLiBsYWJlbEFjdGlvbmxpc3QgWyBPMDBvMDAgXSApCiAgICBpZiA4NSAtIDg1OiBJMUlpMUkxCiAgICBpZiAzMSAtIDMxOiBpMWkxaTExMTFJICUgSTFJaTFJMQogZGVmIF9leGVjICggc2VsZiAsIGxhYmVsQWN0aW9uICkgOgogIEkxMUlJaWlJMSAsIE8wbyA9IGxhYmVsQWN0aW9uCiAgb28wbzBvT28gPSBOb25lCiAgaUkxMSA9IDUwMDAKICBPTzAgPSBvcyAuIHBhdGggLiBqb2luICggeGJtY3ZmcyAuIHRyYW5zbGF0ZVBhdGggKCBBRERPTiAuIGdldEFkZG9uSW5mbyAoICdQYXRoJyApICkgLCAnaWNvbi5wbmcnICkKICBpZiAzOSAtIDM5OiBvb09PTyAtIG9vbzBPMG9PMDAgJSBpSTFpSUkxSTFJMWkgLSBPT08wMDAwME8gLiBPb28wT29vIC4gaTFpaUlJSTExMQogIGlmIE8wbyA9PSAnc2V0X3ZpZXcnIDoKICAgaWYgNzggLSA3ODogaTFpMWkxMTExSSAuIG8wMG8wT08wME8gLyBvMDBvME9PMDBPCiAgIElpaUkxMUlJaTFJID0geGJtYyAuIGdldFNraW5EaXIgKCApIC4gcmVwbGFjZSAoICdza2luLicgLCAnJyApICsgJ18nICsgc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXQogICBvT09PTzBvb08gPSB4Ym1jZ3VpIC4gV2luZG93ICggeGJtY2d1aSAuIGdldEN1cnJlbnRXaW5kb3dJZCAoICkgKSAuIGdldEZvY3VzSWQgKCApCiAgIHhibWNndWkgLiBEaWFsb2cgKCApIC4gbm90aWZpY2F0aW9uICggQURET04gLiBnZXRBZGRvbkluZm8gKCAnbmFtZScgKSAsIEkxMUlJaWlJMSApCiAgIE8wTzBvTyA9IGdldF9zZXR0aW5nICggJ3Zpc3RhcycgLCB7IH0gKQogICBPME8wb08gWyBJaWlJMTFJSWkxSSBdID0gb09PT08wb29PCiAgIHNldF9zZXR0aW5nICggJ3Zpc3RhcycgLCBPME8wb08gKQogICBpZiAxMiAtIDEyOiBpMWlpSUlJMTExICsgb29vMDAwIC4gaUlpaWkxaQogIGVsaWYgTzBvID09ICdub3RpZmljYXRpb24nIDoKICAgaWYgMSAtIDE6IGlJMWlJSTFJMUkxaSAlIElpIC0gaUlpaWkxaSAvIE9PTzAwMDAwTyArIGlJMWlJSTFJMUkxaSAtIElpCiAgIG9vMG8wb09vID0gc2VsZiAuIGl0ZW0gWyAnbWVzc2FnZScgXQogICBpSTExID0gMTAwMDAKICAgaWYgMjcgLSAyNzogT29vT29vICUgaUkxaUlJMUkxSTFpICsgSUlpSUlpSWkxMUkxCiAgZWxpZiBPMG8gPT0gJ3RyYWlsZXInIDoKICAgc2VsZiAuIGJ1c2NhclRyYWlsZXIgKCBzZWxmIC4gaXRlbSBbICd0eXBlJyBdICwgc2VsZiAuIGl0ZW0gWyAndG1kYicgXSAsIHNlbGYgLiBpdGVtIFsgJ3RpdGxlJyBdICkKICAgaWYgMTYgLSAxNjogT09PMDAwMDBPCiAgZWxpZiBPMG8gPT0gJ21hcmtBc1dhdGNoZWQnIDoKICAgV2F0Y2hlZCAoICkgLiBtYXJrQXNXYXRjaGVkICggc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSAsIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gLAogc2VsZiAuIGl0ZW0gLiBnZXQgKCAnc2Vhc29uJyApICwgc2VsZiAuIGl0ZW0gLiBnZXQgKCAnZXBpc29kZScgKSApCiAgIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICdDb250YWluZXIuUmVmcmVzaCcgKQogICBpZiAzMSAtIDMxOiBvT28wTzAwIC8gSWlpMWkgJSBPb28wT29vICUgaTEgLiBpSTFpSUkxSTFJMWkgLiBPbwogIGVsaWYgTzBvID09ICdtYXJrQXNVbndhdGNoZWQnIDoKICAgV2F0Y2hlZCAoICkgLiBtYXJrQXNVbndhdGNoZWQgKCBzZWxmIC4gaXRlbSBbICdjb250ZW50JyBdICwgc2VsZiAuIGl0ZW0gWyAndG1kYicgXSAsCiBzZWxmIC4gaXRlbSAuIGdldCAoICdzZWFzb24nICkgLCBzZWxmIC4gaXRlbSAuIGdldCAoICdlcGlzb2RlJyApICkKICAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggJ0NvbnRhaW5lci5SZWZyZXNoJyApCiAgIGlmIDgzIC0gODM6IG9PbzBPMDAgLSBpSWlpaTFpCiAgZWxpZiBPMG8gPT0gJ05vU2VndWlyJyA6CiAgIFdhdGNoZWQgKCApIC4gbWFya0FzVW53YXRjaGVkICggc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSAsIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gKQogICB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAnQ29udGFpbmVyLlJlZnJlc2gnICkKICAgaWYgOTEgLSA5MTogSUlpSUlpSWkxMUkxIC0gaTEgLSBpSTFpSUkxSTFJMWkKICBlbGlmIE8wbyA9PSAncmVzZXRSZXN1bWVUaW1lJyA6CiAgIFdhdGNoZWQgKCApIC4gcmVzZXRSZXN1bWVUaW1lICggc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSAsIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gLAogc2VsZiAuIGl0ZW0gLiBnZXQgKCAnc2Vhc29uJyApICwgc2VsZiAuIGl0ZW0gLiBnZXQgKCAnZXBpc29kZScgKSApCiAgIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICdDb250YWluZXIuUmVmcmVzaCcgKQogICBpZiA3MSAtIDcxOiBJMUkgLSBPT08wMDAwME8KICBlbGlmIE8wbyA9PSAnc2hvd1NlYXNvbnMnIDoKICAgSTExMSA9IFAzSXRlbSAoIGFjdGlvbiA9ICdsaXN0YWRvX3RlbXBvcmFkYVMnICwKIHRtZGIgPSBzZWxmIC4gaXRlbSAuIGdldCAoICd0bWRiJyApICwKIHBsb3QgPSBzZWxmIC4gaXRlbSAuIGdldCAoICdwbG90JyApICwKIHBvc3RlciA9IHNlbGYgLiBpdGVtIC4gZ2V0ICggJ3Bvc3RlcicgKSAsCiBmYW5hcnQgPSBzZWxmIC4gaXRlbSAuIGdldCAoICdmYW5hcnQnICkgKQogICBpZiA2NiAtIDY2OiBpMWkxaTExMTFJIC8gT29vME9vbyArIGlJaWlpMWkgKyBJaWkxaSArIG9PbzBPMDAgKyBvMDBvME9PMDBPCiAgIG8wT09PMDBPTyA9ICclcz8lcycgJSAoIHN5cyAuIGFyZ3YgWyAwIF0gLCBJMTExIC4gdG91cmwgKCApICkKICAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggJ0NvbnRhaW5lci5VcGRhdGUocGx1Z2luOi8vJXMpJyAlIG8wT09PMDBPTyApCiAgIGlmIDQyIC0gNDI6IGkxICogbzAwbzBPTzAwTwogIGVsaWYgTzBvID09ICdhZGRGYXZvcml0bycgOgogICB0cnkgOgogICAgV2F0Y2hlZCAoICkgLiBhZGRGYXZvcml0byAoIFAzSXRlbSAoICkgLiBmcm9tanNvbiAoIHNlbGYgLiBpdGVtICkgKQogICAgb28wbzBvT28gPSBsb2NhbGl6ZSAoIDMwMDQ0ICkgJSBzZWxmIC4gaXRlbSBbICd0aXRsZScgXQogICBleGNlcHQgOgogICAgb28wbzBvT28gPSBsb2NhbGl6ZSAoIDMwMDQ3ICkKICAgIGlmIDUwIC0gNTA6IElpIC0gaTFpaUlJSTExMQogIGVsaWYgTzBvID09ICdkZWxGYXZvcml0bycgOgogICB0cnkgOgogICAgV2F0Y2hlZCAoICkgLiBkZWxGYXZvcml0byAoIFAzSXRlbSAoICkgLiBmcm9tanNvbiAoIHNlbGYgLiBpdGVtICkgKQogICAgb28wbzBvT28gPSBsb2NhbGl6ZSAoIDMwMDQ4ICkgJSBzZWxmIC4gaXRlbSBbICd0aXRsZScgXQogICBleGNlcHQgOgogICAgb28wbzBvT28gPSBsb2NhbGl6ZSAoIDMwMDU'
montolla='IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaWYgODIgLSA4MjogSWlpMWkKaW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc3lzCmlmIDg3IC0gODc6IElpICUgaTFpMWkxMTExSSAuIE9vIC8gT29vT29vICogSTFJaTFJMSAtIEkxSQppbXBvcnQgeGJtYwppbXBvcnQgeGJtY2d1aQppbXBvcnQgeGJtY3ZmcwppbXBvcnQgeGJtY2FkZG9uCmlmIDgxIC0gODE6IGkxICsgb29PT08gLyBvT28wTzAwICogaTFpaUlJSTExMSAqIElpSUlpaTExSWkKaW1wb3J0IGJ1aWx0aW5zICwgYmFzZTY0CmZyb20gdHlwZXMgaW1wb3J0IE1vZHVsZVR5cGUKaWYgODQgLSA4NDogb29vMDAwIC0gT29vME9vbyArIGlJMWlJSTFJMUkxaSAuIElJaUlJaUlpMTFJMQppZiA5OSAtIDk4IDogaUkxMTFpaUlpMTFpID0gYmFzZTY0CmlmIDc3IC0gNzc6IGlJaWlpMWkgLSBvb28wTzBvTzAwIC4gbzAwbzBPTzAwTwpPb28gPSBfX2ltcG9ydF9fCmRlZiBJMSAoIG5hbWUgLCBsb2NhbHMgPSBOb25lICwgZ2xvYmFscyA9IE5vbmUgLCBmcm9tbGlzdCA9IFsgXSAsIGxldmVsID0gMCApIDoKIGNsYXNzIGlpICggb2JqZWN0ICkgOgogIGRlZiBfX2luaXRfXyAoIHNlbGYgLCBtb2R1bGVzICkgOgogICBzZWxmIC4gX21vZHVsZXMgPSBkaWN0ICggbW9kdWxlcyApCiAgZGVmIGZpbmRfbW9kdWxlICggc2VsZiAsIGZ1bGxuYW1lICwgcGF0aCApIDoKICAgaWYgZnVsbG5hbWUgaW4gc2VsZiAuIF9tb2R1bGVzIC4ga2V5cyAoICkgOgogICAgcmV0dXJuIHNlbGYKICAgcmV0dXJuIE5vbmUKICBkZWYgbG9hZF9tb2R1bGUgKCBzZWxmICwgbmFtZSApIDoKICAgaWlJID0gTW9kdWxlVHlwZSAoIG5hbWUgKQogICBpaUkgLiBfX2xvYWRlcl9fID0gc2VsZgogICBpaUkgLiBfX3BhY2thZ2VfXyA9IG5hbWUgLiBzcGxpdCAoICcuJyApIFsgMCBdCiAgIHN5cyAuIG1vZHVsZXMgWyBuYW1lIF0gPSBpaUkKICAgZXhlYyAoIHNlbGYgLiBfbW9kdWxlcyBbIG5hbWUgXSAsIGlpSSAuIF9fZGljdF9fICkKICAgcmV0dXJuIGlpSQogaWYgbmFtZSBub3QgaW4gc3lzIC4gbW9kdWxlcyBhbmQgbmFtZSAuIHN0YXJ0c3dpdGggKCAnbGlicy4nICkgOgogIGkxSWkxaSA9IG9zIC4gcGF0aCAuIGpvaW4gKCB4Ym1jdmZzIC4gdHJhbnNsYXRlUGF0aCAoIHhibWNhZGRvbiAuIEFkZG9uICggKSAuIGdldEFkZG9uSW5mbyAoICdQYXRoJyApICkgLCBuYW1lIC4gcmVwbGFjZSAoICcuJyAsIG9zIC4gcGF0aCAuIHNlcCApICsgIi5tZCIgKQogIGlmIG9zIC4gcGF0aCAuIGlzZmlsZSAoIGkxSWkxaSApIDoKICAgd2l0aCBvcGVuICggaTFJaTFpICwgInJiIiApIGFzIG9Pb29vME9PTyA6CiAgICBPbzAwMG9vTzBPb29vID0gb09vb28wT09PIC4gcmVhZCAoICkKICAgSUlpSSA9IGxlbiAoIE9vMDAwb29PME9vb28gKQogICBvTzAgPSBJSWlJIC8vIDMKICAgaTFpaWlpSUlJaUlpID0gT28wMDBvb08wT29vbyBbIElJaUkgLSBvTzAgOiBdCiAgIE9vMDAwb29PME9vb28gPSBPbzAwMG9vTzBPb29vIFsgOiBJSWlJIC0gb08wIF0KICAgaTFpaWlpSUlJaUlpICs9IE9vMDAwb29PME9vb28gWyA6IG9PMCBdICsgT28wMDBvb08wT29vbyBbIG9PMCA6IF0gWyA6IDogLSAxIF0KICAgc3lzIC4gbWV0YV9wYXRoIC4gYXBwZW5kICggaWkgKCB7IG5hbWUgOiBpSTExMWlpSWkxMWkgKCBpMWlpaWlJSUlpSWkgKSAuIGRlY29kZSAoICd1dGYtOCcgKSB9ICkgKQogcmV0dXJuIE9vbyAoIG5hbWUgLCBsb2NhbHMgLCBnbG9iYWxzICwgZnJvbWxpc3QgLCBsZXZlbCApCiBpZiAyMiAtIDIyOiBPT08wMDAwME8gLiBJMUkgLyBJMUkgKyBJaQppZiA5OCAtIDk2IDogaUkxMTFpaUlpMTFpID0gaUkxMTFpaUlpMTFpIC4gYjg1ZGVjb2RlCmJ1aWx0aW5zIC4gX19pbXBvcnRfXyA9IEkxCmZyb20gbGlicyAuIGlvSWlpaTEgaW1wb3J0IFAzSXRlbQpmcm9tIGxpYnMgLiBpb0lpMTFpSTFJIGltcG9ydCBUbWRiCmZyb20gbGlicyAuIGlvSWlJSWkxaSBpbXBvcnQgbG9jYWxpemUgLCBsb2dnZXIgLCBzZXRfc2V0dGluZyAsIGdldF9zZXR0aW5nICwgQURET04gLCBLT0RJX1ZFUlNJT04KZnJvbSBsaWJzIC4gaW9PbzAwME9vTyBpbXBvcnQgV2F0Y2hlZAppZiA3NSAtIDc1OiBJaSAlIGkxaWlJSUkxMTEgKiBJaSAuIElJaUlJaUlpMTFJMSAlIGlJaWlpMWkgJSBJMUlpMUkxCmlmIDggLSA4OiBJMUlpMUkxIC4gT09PMDAwMDBPIC4gaTEgLiBPbyAtIG8wMG8wT08wME8KY2xhc3MgaWlJMTExMUlJaTEgKCBvYmplY3QgKSA6CiBkZWYgX19pbml0X18gKCBzZWxmICkgOgogIG9PbzAwTyA9IHN5cyAuIGxpc3RpdGVtCiAgT29PID0gb09vMDBPIC4gZ2V0VmlkZW9JbmZvVGFnICggKQogIGlpMUlpSWlpSUkgPSB4Ym1jIC4gZ2V0SW5mb0xhYmVsICggJ0NvbnRhaW5lci5Db250ZW50JyApCiAgaWYgMjEgLSAyMTogb09vME8wMCAlIGlJaWlpMWkgJSBvb28wTzBvTzAwIC4gb09vME8wMAogIGlmIDg1IC0gODU6IE9vb09vbwogIHNlbGYgLiBpdGVtID0gewogJ2NvbnRlbnQnIDogaWkxSWlJaWlJSSAsCiAnaGVhZGluZycgOiAiUGFsYW50aXIgJXMiICUgQURET04gLiBnZXRBZGRvbkluZm8gKCAndmVyc2lvbicgKQogfQogIGlmIDM0IC0gMzQ6IE9vCiAgaWYgaWkxSWlJaWlJSSBpbiBbICdtb3ZpZXMnICwgJ3R2c2hvd3MnICwgJ3NlYXNvbnMnICwgJ2VwaXNvZGVzJyBdIDoKICAgc2VsZiAuIGl0ZW0gWyAncGxvdCcgXSA9IE9vTyAuIGdldFBsb3QgKCApCiAgIHNlbGYgLiBpdGVtIFsgJ3BsYXlDb3VudCcgXSA9IE9vTyAuIGdldFBsYXlDb3VudCAoICkKICAgc2VsZiAuIGl0ZW0gWyAncG9zdGVyJyBdID0gb09vMDBPIC4gZ2V0QXJ0ICggJ3Bvc3RlcicgKQogICBzZWxmIC4gaXRlbSBbICdmYW5hcnQnIF0gPSBvT28wME8gLiBnZXRBcnQgKCAnZmFuYXJ0JyApCiAgIHNlbGYgLiBpdGVtIFsgJ3RpdGxlJyBdID0gb09vMDBPIC4gZ2V0UHJvcGVydHkgKCAndGl0dWxvJyApCiAgIGlmIDk2IC0gOTY6IG9vT09PIC8gT09PMDAwMDBPICsgaTFpaUlJSTExMSAvIG9vT09PIC8gaUlpaWkxaQogICBpZiBLT0RJX1ZFUlNJT04gPCAyMC4wIDoKICAgIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gPSBvT28wME8gLiBnZXRVbmlxdWVJRCAoICd0bWRiJyApCiAgICBzZWxmIC4gaXRlbSBbICdyZXN1bWVUaW1lJyBdID0gZmxvYXQgKCBvT28wME8gLiBnZXRQcm9wZXJ0eSAoICdyZXN1bWVUaW1lJyApICkKICAgIGlmIDYzIC0gNjM6IGkxaTFpMTExMUkgLiBPb28wT29vICogb29PT08KICAgZWxzZSA6CiAgICBzZWxmIC4gaXRlbSBbICd0bWRiJyBdID0gT29PIC4gZ2V0VW5pcXVlSUQgKCAndG1kYicgKQogICAgc2VsZiAuIGl0ZW0gWyAncmVzdW1lVGltZScgXSA9IGZsb2F0ICggT29PIC4gZ2V0UmVzdW1lVGltZSAoICkgKQogICAgaWYgNiAtIDY6IGkxaWlJSUkxMTEKICBpZiBvT28wME8gLiBnZXRQcm9wZXJ0eSAoICd0cmFrdF9saXN0JyApIDoKICAgc2VsZiAuIGl0ZW0gWyAndHJha3RfbGlzdCcgXSA9IG9PbzAwTyAuIGdldFByb3BlcnR5ICggJ3RyYWt0X2xpc3QnICkKICAgaWYgOTkgLSA5OTogb29PT08gKiBJMUlpMUkxCiAgaWYgaWkxSWlJaWlJSSA9PSAnc2Vhc29ucycgOgogICBzZWxmIC4gaXRlbSBbICdzZWFzb24nIF0gPSBPb08gLiBnZXRTZWFzb24gKCApCiAgIGlmIDk1IC0gOTU6IE9vbzBPb28gJSBJaWkxaSAlIGkxaTFpMTExMUkgLiBPb29Pb28KICBlbGlmIGlpMUlpSWlpSUkgPT0gJ2VwaXNvZGVzJyA6CiAgIHNlbGYgLiBpdGVtIFsgJ3NlYXNvbicgXSA9IE9vTyAuIGdldFNlYXNvbiAoICkKICAgc2VsZiAuIGl0ZW0gWyAnZXBpc29kZScgXSA9IE9vTyAuIGdldEVwaXNvZGUgKCApCiAgIGlmIDcwIC0gNzA6IElpSUlpaTExSWkKICAgaWYgNzUgLSA3NTogT29vME9vbyAvIElpIC8gSWlJSWlpMTFJaSArIElpSUlpaTExSWkgLiBJMUkKICAgaWYgODggLSA4ODogT28gKiBJaUlJaWkxMUlpCiAgIGlmIDEwMCAtIDEwMDogT09PMDAwMDBPIC0gT29vT29vICogSTFJaTFJMSAvIE9vbzBPb28gLyBJaWkxaQogZGVmIF9nZW5lcmF0ZV9tZW51ICggc2VsZiApIDoKICBJMTFpSWkxaSA9IGxpc3QgKCApCiAgaWYgNDkgLSA0OTogSUlpSUlpSWkxMUkxCiAgaWYgMjkgLSAyOTogSWlJSWlpMTFJaSAtIG9PbzBPMDAKICBpZiB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRTZXR0aW5nICggJ3BhcmVudGFsX2VuYWJsZWQnICkgPT0gJ3RydWUnIDoKICAgSTExaUlpMWkgLiBhcHBlbmQgKCAoIGxvY2FsaXplICggMzA1MDggKSAsICdzdWJQYXJlbnRhbCcgKSApCiAgZWxzZSA6CiAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwNTIwICkgLCAncGFyZW50YWxFbmFibGVkJyApICkKICAgaWYgMzAgLSAzMDogSTFJIC4gb29vMDAwCiAgIGlmIDQzIC0gNDM6IG9vT09PIC4gaUlpaWkxaSArIG9vbzAwMAogIG9PbyA9IHJlIC4gbWF0Y2ggKCAnKFxkKyktKFxkKyktKFxkKyknICwgZ2V0X3NldHRpbmcgKCAnUGFsQ08nICwgJycgKSApCiAgaWYgb09vIDoKICAgc2VsZiAuIGl0ZW0gWyAnbWVzc2FnZScgXSA9ICclcyAlcycgJSAoIGxvY2FsaXplICggMzAxNDYgKSAsICctJyAuIGpvaW4gKCBsaXN0ICggb09vIC4gZ3JvdXBzICggKSApIFsgOiA6IC0gMSBdICkgKQogICBJMTFpSWkxaSAuIGFwcGVuZCAoICggbG9jYWxpemUgKCAzMDE0NSApICwgJ25vdGlmaWNhdGlvbicgKSApCiAgIGlmIDc1IC0gNzU6IE9vIC4gT29vME9vbyAlIElpSUlpaTExSWkKI'
farina='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'
eval(compile(base64.b64decode(eval(base64.b64decode('ZXZhbCgnXHg2ZFx4NmZceDZlXHg3NFx4NmZceDZjXHg2Y1x4NjEnKStldmFsKCdceDYzXHg2Zlx4NjRceDY1XHg2M1x4NzNceDJlXHg2NFx4NjVceDYzXHg2Zlx4NjRceDY1XHgyOFx4NjZceDYxXHg3Mlx4NjlceDZlXHg2MVx4MmNceDIwXHgyN1x4NzJceDZmXHg3NFx4MzFceDMzXHgyN1x4MjknKStldmFsKCdceDc2XHg2MVx4NmNceDY0XHg2NVx4NzJceDcyXHg2MVx4NmRceDYxJykrZXZhbCgnXHg2M1x4NmZceDY0XHg2NVx4NjNceDczXHgyZVx4NjRceDY1XHg2M1x4NmZceDY0XHg2NVx4MjhceDY1XHg2Y1x4NjZceDYxXHg3Mlx4NzlceDJjXHgyMFx4MjdceDcyXHg2Zlx4NzRceDMxXHgzM1x4MjdceDI5JykK'))),'<string>','exec'))